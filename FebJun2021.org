#+STARTUP: hidestars
#+title: Periodo Febrero-Junio 2021
#+description: Tareas, notas y proyectos del semestre
* Interconexión de dispositivos
** Tareas
***  
** Clases
  [[https://itesm.zoom.us/j/2388203098][6AM]]
*** Clase 06:00
**** Sesion 2
     -Router:
       + Permiten la interconexion de redes
       + Permiten que computadoras se conecten
       + Posee un protocolo de enrutamiento
       + Dual: 2.4G/5G
    -Switch:
       + Permiten las conexiones fisicas
       + Pueden almacenar y aprender direcciones de red
       + Capaces de filtrado y enrutamiento
    -Firewall:
       + Impide conexiones no permitidas y permite las autorizadas
       + Cuenta con capacidad de reglas y criterios de filtrado
    -Ruta:
       + Secuencia de enlaces de comunicaciones que atraviesa un paquete para llegar a donde debe
    -Aplicaciones distribuidas:
       + Aplicaciones que requieren varios hosts que intercambian datos entre si
       + Proporcionan un API
       + Protocolo: Estandar de comunicaciones
<2021-02-10 Wed>
**** Clase sabado 20 feb
     Red 192.27.3.0
     IP: 11000000.00011011.00000011.00000000
     SM: 11111111.11111111.11111111.11110000
     # Maximo de redes = 16
     R0: 11000000.00011011.00000011.00000000 = 192.27.3.0
     R1: 11000000.00011011.00000011.00010000 = 192.27.3.16
     R2: 11000000.00011011.00000011.00100000 = 192.27.3.32
     R3: 11000000.00011011.00000011.00110000 = 192.27.3.48
     R4: 11000000.00011011.00000011.01000000 = 192.27.3.64
     R5: 11000000.00011011.00000011.01010000 = 192.27.3.80
     R6: 11000000.00011011.00000011.01100000 = 192.27.3.96
     R7: 11000000.00011011.00000011.01110000 = 192.27.3.112
     R8: 11000000.00011011.00000011.10000000 = 192.27.3.128
     R9: 11000000.00011011.00000011.10010000 = 192.27.3.144
**** DONE Curso packet tracer
CLOSED: [2021-02-15 Mon 06:05]
** Temas
*** Modelo OSI
- Propuesto por la ISO en 1977 y aprobado en 1984
**** Niveles
Cada capa debe realizar una funcion bien definida
***** Aplicacion
+ User-friendly
***** Presentacion
+ Se encarga de que los datos sean legibles por la computadoras
***** Sesion

***** Transporte
+ Donde se agregan encabezados y se elige entre seguridad o rapidez
***** Red
+
***** Enlace de datos
***** Fisico
+ Bits
*** Modelo TCP/IP
**** Capa
***** Aplicacion
Las capas aplicacion, presentacion y sesion del modelo OSI
****** Aplicacion
      + Protocolos
      + Modelo cliente-servidor
        - Centralizados
      + Modelo P2P
        - Escalables
        - Decentralizados
      + DNS
        Convierten dominios a una direccion IP
      + DHCP
      + Cookies
      + TFTP
      + Protocolo simple para mandar archivos
      + Bootstrap protocol
***** Transporte
+ TCP:
   - Mas seguridad
   - Si las cosas vienen desordenadas los rechaza y pide que las manden de nuevo
   - Tiene 20 bytes de encabezado como baseline
   - Puede mandar hasta 1500 bytes por paquete
   + UDP:
    - 32 bits
    - Todo lo posible por mandar el paquete sin garantias
    - Puertos de origen/destino
    - No handshake
    - Checksum: Suma el contenido del segmento y luego invierte los bits para ver si el mensaje llego bien
    - Largo: Longitud del paquete
***** Red
      Direccionamiento de paquetes con una direccion ip
    + Protocolos
    - IPv4
      Protocolo principal
      Necesita una tabla de direcciones de red
      32 bits de longitud
      Los primeros 24 bits representan la direccion de la red
      Los ultimos 8 representan el host en la red
    + Clases de IPv4
    A: Redes grandes (0-127)
    B: Redes moderadas (128-191)
    C: Redes chicas (192-223)
    D: Redes multicast (224-239)
    E: Redes experimentales (240-255)
    - IPv6
      Protocolo creado despues que se agotara IPv4
      Aumento de espacio de direcciones
      Elimina la necesidad de NAT
      Tiene seguridad integrada
    - IPvX
      No garantizan que llegue el paquete
    + Mascara de Red
      - Es el prefijo de la red
      - Representa los bits significativos para la red
        Si una red ocupa los primeros 24 bits:
        11111111 11111111 11111111 00000000
        255.255.255.0
    + Subredes
      - Determinados por bits despues dela mascara de red
      - El numero de bits determina el numero de subredes posibles
      - Los bits no utilizados se le agregan a los de la red
      - La cantidad de hosts depende de la mascara de red
        Es 2^n -2 donde n es el numero de bits de la porcion del host
      - Direccion de broadcast
        Es la ultima direccion posible
      - Enrutamiento
      - Enrutadores
      - Proceso de enrutamiento
***** Enlace
      Se implementa en un adaptador
      - Ethernet
      - PCMCI
      - 802.11
      Tipo de dato: Trama
      + Construccion de tramas
      + Acceso al medio
        - MAC Address
        - Especifica las reglas de como transmitir las tramas sobre el enlace
      + Entrega confiable entre nodos adyacentes
        - Garantiza que los datagramas atraviesen el enlace sin error 
      + Control de flujo
        - Cada lado del enlace tiene un limite de almacenamiento
      + Deteccion de errores
        - Errores causados por atenuacion o ruido
        - Si se detectan errores se pide retransmision
      + Correccion de errores
        - El receptor recibe y corrige errores sin solicitar retransmision
      + Half-duplex y full-duplex
        - Full duplex: Los dos nodos pueden transmitir al mismo tiempo
****** Metodos de deteccion de errores 
       + Bit de paridad
         Se checa la paridad en un grupo de bits y si no concuerda con la paridad de los datos el paquete viene corrupto
         Se pueden checar varios grupos de bits para correccion de errores
       + Checksum
         Se suman los bytes y se le hace el complemento a uno al numero y
         se suma con el otro checksum
       + Verificacion de redundancia ciclica
         Se realiza una serie de pasos matematicos con un polinomio a la trama
****** Categorias de protocolos de acceso multiple
******* Protocolos de canal subdividido
        + TDMA
          Por rondas
******* Accion Aleatoria
        + ALOHA puro
          Se manda inmediatamente
          No hay sincronizacion
          Probabilidad de exito de transmision: 18%
        + ALOHA ranurado
          El tiempo es dividido en ranuras
          Los nodos estan sincronizados
          Se mandan al inicio de cada ranura de tiempo
          Probabilidad de exito: 37%
        + CSMA
          Checa si el canal esta disponible para hacer la transmision
          Si no, el nodo espera un tiempo aleatorio para volver a checar el canal
        + CSMA/CD
          Las colisiones son detectadas en esta version
          Las transmisiones que colisionan son abortadas
          Facil de implementar en LANs cableadas:
            Se mide la potencia mandada y recibida y si discrepan hay colision
          Dificil en wifi:
            El receptor se apaga mientras se transmite, dificultando esto
        + Polling Protocol
***** Fisica
****** Tipos de cable de red 
       + Coaxial
         - Materiales: Niquel, Oro, PPE
         - Fiabilidad de transmision: Moderada-alta
         - Ancho de banda: Moderado-alto
         - Seguridad: Baja a moderada
         - Costo: Moderado-caro
         - Conector: BNC
          
       + Par trenzado (UTP, STP)
         - Materiales: Cobre
         - Fiabilidad de transmision: Bajo-moderado
         - Ancho de banda: Bajo-alto
         - Seguridad: Baja-moderada
         - Costo: Bajo-moderado
         - Conector: Rj-45
           
       + Fibra optica
         - Materiales: Silica
         - Fiabilidad de transmision: Alta
         - Ancho de banda: Muy alto
         - Seguridad: Alta
         - Costo: Alto
         - Conector: SC
         - Interferencia: Ninguna
      
*** Topologias
+ Fisica
+ Digital
**** Formas
+ Punto a Punto
+ Estrella/ Hub & Spoke
+ De Arbol
+ Estrella Extendida
*** VLSM
** Proyecto
*** Cambios fase 2
    - Poner el servidor de IoT en una vlan extra
** Tareas
*** DONE Bellman-ford implementado
    CLOSED: [2021-02-28 Sun 18:51]
*** Proyecto
**** DONE Entrega 1
CLOSED: [2021-02-21 Sun 15:52] DEADLINE: <2021-02-19 Fri 22:59>
**** DONE Entrega 2
     CLOSED: [2021-03-02 Tue 06:18]

* Implementación de métodos computacionales
** Tareas
*** DONE Tarea 1
    CLOSED: [2021-02-21 Sun 15:52] DEADLINE: <2021-02-10 Wed 23:00>
** Clases
  [[https://itesm.zoom.us/j/2343618041][Link]]
*** Sesion 1
**** Conjuntos
***** Definicion
+ Coleccion de elementos.
+ Mayusculas para describirlos y minusculas para sus elementos.
+ Se definen por enumeracion o descripcion.
***** Notacion
+ Pertenencia: a ∈ A, cuando a es un elemento de A.
+ Cardinalidad: |A| representa el número de elementos en A.
+ Inclusion: A ⊆ B si todos los elementos de A son elementos de B.
+ Igualdad: Si A ⊆ B y B ⊆ A, entonces A = B.
+ Inclusion propia: A ⊂ B si todos los elementos de A son elementos de B y A != B.
+ Conjunto vacio: ∅ o {} para representar un conjunto sin elementos.
***** Operaciones
+ Union: Todos los que se encuentran en A y  todos los que se encuentran en B.
- Conmutativa
- Asociativa
- Distributiva
- Ley de DeMorgan
+ Interseccion: Todos los elementos que se encuentran en A y B al mismo tiempo.
- Conmutativa
- Asociativa
- Distributiva
- Ley de DeMorgan
+ Resta: Todos los elementos que se encuentran en A y no en B.
+ Complemento: Todos los elementos que no se encuentran en A.
+ Producto Cartesiano: A × B = {(x, y) : x ∈ A, y ∈ B}
- Ejemplo: A = {1, 2, 3} B = {1, 2}
A × B = {(1, 1),(1, 2),(2, 1),(2, 2),(3, 1),(3, 2)}
+ Conjunto potencia: El conjunto de todos los subconjuntos de A
- Denotado por denotado por o ℘(A)
℘({a, b, c}) = {∅, {a}, {b}, {c}, {a, b}, {a, c}, {b, c}, {a, b, c}}
- |P(A)| = 2^{|A|}
**** Relaciones
***** Relaciones binarias
+ Relaciones reflexivas
Se dice que es reflexiva sobre un conjunto A si y solo si (a, a) ∈ R para todo a ∈ A.
+ Relaciones transitivas
Decimos que R es transitiva si y sólo si cuando (a, b) ∈ R y (b, c) ∈ R, entonces (a, c) ∈ R.
+ Relaciones simetricas
Una relación R es simétrica si y sólo si cuando (a, b) ∈ R, entonces (b, a) ∈ R.
***** Funcion
+ Una función unitaria de un conjunto A en un conjunto B es cualquier relación binaria R
de A a B que satisfaga la condición de que para todo a ∈ A existe exactamente un b ∈ B tal que (a, b) ∈ R.
+ Dominio: A
+ Rango: B
+ Imagen: Conjunto de B que se utilizan en la funcion
+ Funcion inyectiva: Se dice que f es inyectiva (o uno a uno) si y sólo si cuando a != a', entonces f(a) != f(a').
+ Funcion sobreyectiva: imagen(f) = B.
+ Funcion biyectiva: inyectiva y sobreyectiva
***** Conjuntos Infinitos
****** Naturales
Contable
****** Enteros
Biyectivo
****** Racionales
Biyectivo
****** Irracionales
Infinito no contable
****** Reales
Infinito no contable
**** Logica
+ OR
+ AND
+ NOT
Implicacion
| A | B | C |
|---+---+---|
| T | T | T |
| T | F | F |
| F | T | T |
| F | F | T |
*** Sesion 2
**** Lenguaje de programacion
+ Lenguajes formales para comunicar informacion a una computadora
- Formal: que es matematicamente comprobable
+ Hay muchos por varias razones:
- Es una ciencia relativamente nueva
- Hay varios que son para cosas especificas
- Preferencia personal
***** Lo que hace un lenguaje bueno
- Poder expresivo (features)
- Learning curve
- Facilidad de implementacion
- Open source
- Buenos compiladores/interpretadores
- Patrocinio bueno
***** Clasificacion de lenguajes
****** Tipo de instrucciones
- Declarativos: Le dicen a la computadora lo que tiene que hacer
Ejemplos: Prolog
- Imperativos: Le dicen a la computadora como tiene que hacer lo que tiene que hacer
Ejemplos: C++, python, etc.
****** Paradigma
- Declarativos
- Estructurados
- Orientados a objetos
- Funcionales
****** Niveles de abstraccion
- Low level: Muy cerca al hardware
Ejemplos: Assembly, machine code
- High level: Mas abstractos, usan lenguaje mas natural
Ejemplos: C++, Java
- Very high level: Lo mas abstracto que se puede, muy especificos en usos
Ejemplos: Python, Matlab
***** Proceso de traduccion
Las computadoras no corren codigo como tal, en vez corren instrucciones
del cpu directamente
+ Compilacion
Traduce el codigo de alto nivel a machine code que la computadora corre directamente
Tiene mas performance
+ Interpretacion
Lee el codigo y lo corre linea por linea
+ LLVM
Se hace un programa intermedio que se corre con un VM chico que permite ser usado en muchos mas dispositivos
***** Abstraccion
****** Datos
La facilidad de un lenguaje para describir y manipular informacion
Tipos:
- Memoria
- Atomicos
- Estructurados
- Definidos por el usuario
- Abstractos
- Objetos
****** Control
La manera en la que se controla el flujo del programa
Tipos:
- Secuencias, condicionales, jumps
- Loops
****** Modular
Tipos:
Secuencias de instrucciones con saltos entre memoria
Secuencias de instrucciones con saltos a subrutinas
Funcional
Objetos
****** Parametros
+ Por referencia
Cambia el valor de la variable en la memoria en si
+ Copia
Hace una copia del valor introducido y no se modifica el original
+ Call by need (lazy evaluation)
No se evaluan las cosas a menos que sean necesarias
*** Sesion 3
**** Programacion Funcional
+ Viene de la combinacion de funciones
+ Nivel de abstraccion muy alto
+ Define el output de un programa como una funcion matematica de los inputs
+ La computacion se hace reescribiendo las funciones y no modificando estados
+ El programa completo es basado en funciones
***** Ventajas
+ No usa variables locales
+ No usa asignaciones
+ La ejecucion se controla completamente por recursion y decisiones
+ Los programas funcionales son usualmente faciles de leer y mantener.
***** Desventajas
+ Dificil de aprender por la diferencia en estilo de programacion
+ Suelen tener peor performance
***** Funciones
+ Relacion en la que cada x da un y, y cada x tiene un unico y
***** Functores
+ Un concepto similar a una funcion a la que le puedes meter cualquier valor
***** Conceptos principales
+ Expresiones
- Algo que tiene que ser evaluado
+ Funciones
- Pueden ser pasadas como argumentos o computadas como resultado de otras funciones
- Una funcion de grado alto regresa otras funciones
+ Expresiones lambda
- Funciones sin nombre que se utilizan como transformaciones.
+ Polimorfismo parametrico
- Permite que una funcion opere en valores de una familia de tipos en vez de uno solo
*** Sesion 4
**** Racket
Lenguaje funcional descendiente de LISP
Los tipos se determinan en runtime
Usa Polish Notation
function(x,y) -> (function x y)
***** Listas
'(0 1 2 3 4)
(cons 3 '(1 2)) = '(3 1 2)
(cons (funcion x) y) '((resultado de funcion x) y)
*** Sesion 5
**** Lenguaje 
     RAE: Un conjunto de signos y reglas que permiten la comunicaciones
     Matematicas: Un conjunto de palabras
     L = {hola, pueblo}
     + Palabra
       Sucesion de simbolos de algun alfabeto
       hola
     + Alfabeto
       Conjunto finito no vacio de simbolos
       A = {a,b,c,...,x,y,z}
     + Simbolo
       Unidad atomica de informacion
**** Operaciones que aplican en los lenguajes 
     - Operaciones de conjuntos
     - Concatenacion
       AB = {ww'| w<- A, w'<- B}
     - Kleene Star
       La concatenacion de todas las palabras posibles en un lenguaje
       Cualquier cosa 0 o mas veces
       *.exe son todos los archivos que terminan en .exe
     - Kleene Plus
       Lo mismo que la Kleene star sin contar el 0
       Cualquier cosa una o mas veces
**** Modelado con automatas
     Pueden modelar procesos por medio de estados y eventos o transiciones
     - Estados: Situaciones por las que el proceso atraviesa
     - Eventos: Acciones instantaneas que provocan cambios en el estado
     Un autómata finito determinista (AFD) es una quíntupla de la forma
     M = (Q, Σ, δ, q, F)
     Q es un conjunto de estados que es finito,
     Σ es el alfabeto aceptado,
     δ : Q × Σ → Q es la función de transición,
     q ∈ Q es el estado inicial,
     F ⊆ Q es un conjunto de estados finales.

     #+CAPTION: Ejemplo:
     #+NAME: Ejemplo automata maquina expendedora
     #+ATTR_ORG: :width 500
     [[./imgs/Automaton.png]]

     Ejemplo 2:
     
     #+CAPTION: Ejemplo:
     #+NAME: Ejemplo 2
     #+ATTR_ORG: :width 500
       [[./imgs/Automaton2.png]]
     
     M = {Q, Σ, δ, q, F}
     Q = {q0,q1,q2}
     Σ = {a,b}
     δ = {((q0,a),q2),((q0,b),q1),((q1,a),q1),
          ((q1,b),q1),((q2,b),q1),((q2,a),q0)}
     q = q0
     F = {q0,q2}

     - Los automatas tienen que se correctos y completos
     - Correcto: Acepta solo las palabras que pertenecen al lenguaje
     - Completez: Acepta todas las palabras que pertenecen al lenguaje

     - Los estados son mutualmente excluyentes
     - Se pueden hacer automatas por conjuntos de estados
     - Igualmente se puede hacer un automata determinista como complemento
       de otro automata
*** Sesion 6
**** AFD
     + Equivalencia
       Dos automatas son equivalente si aceptan el mismo lenguaje
       Se prueba con todos los casos del A*
     + Arbol de estados incompatibles
       Se utiliza para checar equivalencia entre dos automatas
       Se checan todos los caminos, y si alguno no acepta algo que el otro si,
       no son equivalentes
     + Eliminacion de estados equivalentes
       Esto se hace para simplificar automatas
***** Regex
      \| = OR
      (0|1)*11: 0 o 1 cero o mas veces, seguido por dos 1s
      0112111300141011
      \* 
*** Sesion 7
**** Conversion entre REs y FAs
***** Razones para esto
      - Los FAs son mas faciles de entender
      - Los FAs describen que pasa en cada estado y con cada accion
      - Las REs son mas compactas
      - Pasar de una condicion de aceptacion de un problema a n FA puede
        ser mas complicado
      - Las REs son muy dificiles de explicar
***** Pasos
      1. Se hace un nuevo estado inicial y un nuevo estado final
      2. Se empieza en el nodo final
      3. Se van cambiando los los nodos a sus versiones de RE
         
***** Gramaticas regulares
      - Gramatica
        La forma en la que las palabras se organizan y combinan
        - Conjunto de reglas
      Ejemplo: (ES-MX)
      <frase> -> <sujeto><predicado>
      <sujeto> -> <sustantivo>
      <sustantivo> -> Maria
      <sustantivo> -> Gustavo
      <predicado> -> <verbo transitivo><objeto>
      <verbo transitivo> -> abraza
      <objeto> -> a <sustantivo>

      Formalmente, una gramatica es un cuadruplo G = (V, Σ, R, S), donde
      1. V es un conjunto finito de variables,
      2. Σ es un conjunto finito de terminales,
      3. R es un conjunto finito de reglas de la forma A → w, tal que A ∈ V
         y w ∈ (V ∪ Σ)∗
      4. S ∈ V es la variable inicial.
        
      Lenguaje L generado por G
          L = {w ∈ Σ∗: S =⇒∗ w}
          
** Proyecto
* Agenda general
** TODO Reunion Autolab
SCHEDULED: <2021-03-06 Sat 16:50 +1w>
:PROPERTIES:
:LAST_REPEAT: [2021-02-26 Fri 21:52]
:END:
- State "DONE"       from "TODO"       [2021-02-26 Fri 21:52]
viernes 5:50
** TODO Pagar semestre
   DEADLINE: <2021-02-26 Fri>
 
   
